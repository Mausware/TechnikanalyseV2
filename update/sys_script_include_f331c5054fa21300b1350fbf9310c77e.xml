<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_178023_technikv2.GlideLiveFeedEnhancer</api_name>
        <client_callable>false</client_callable>
        <description>Kopie des GlideLiveFeedEnhancer aus Stephan Odenthals Function Library </description>
        <name>GlideLiveFeedEnhancer</name>
        <script><![CDATA[var GlideLiveFeedEnhancer = Class.create();

/* Gets the User Profile of a User
	Params:
	#1: userId:[string] // Represents a user who needs to create and get a User TimeAccount
	Returns:
	profile id:[string] // Returns Id of already existing Live Feed Profile */
GlideLiveFeedEnhancer.getUserProfile = function(userID) {
	return GlideLiveFeedEnhancer.prototype._getProfile(userID);
};

GlideLiveFeedEnhancer.getUserProfileList = function(userList) {
	return GlideLiveFeedEnhancer.prototype._getProfileList(userList);
};

/* Gets the User Profile of a User
Params:
	#1: name:[string] // the name of the group to be created
	Returns:
	profile id:[string] // Returns Id of new Live Feed Group Profile */
GlideLiveFeedEnhancer.createGroupProfile = function(name) {
	return GlideLiveFeedEnhancer.prototype._createGroup(name);
};

/* Gets the User Profile of a User
Params:
	#1: userList:[array] // the name of the group to be created
	Returns:
	profile id:[string] // Returns Id of new Live Feed Group Profile */
GlideLiveFeedEnhancer.addMembersToGroup = function(groupID, profileList) {
	return GlideLiveFeedEnhancer.prototype._addMembers(groupID, profileList);
};

/* Gets the User Profile of a User
Params:
	#1: userList:[array] // the name of the group to be created
	Returns:
	profile id:[string] // Returns Id of new Live Feed Group Profile */
GlideLiveFeedEnhancer.createConversation = function(recipient, secondaryRecipients, sender, messages, groupName, popUp) {
	return GlideLiveFeedEnhancer.prototype._createConversation(recipient, secondaryRecipients, sender, messages, groupName, popUp);
};


GlideLiveFeedEnhancer.prototype = {
	initialize: function() {
	},

	_getProfile: function(userID){
		var gr = new GlideRecord('live_profile');
		gr.addEncodedQuery("document=" + userID +"^type=user");
		gr.query();
		if(gr.next()){
			return gr.sys_id;
		}else {
			return false;
		}
	},

	_getProfileList: function(userList){
		var answer = [];
		for (var i=0; i<userList.length; i++){
			var gr = new GlideRecord('live_profile');
			gr.addEncodedQuery("document=" + userList[i] +"^type=user");
			gr.query();
			if(gr.next()){
				answer.push(gr.sys_id);
			}
		}
		return answer;
	},

	_createGroup: function(name){
		var chatContainer = new GlideRecord('live_group_profile');
		chatContainer.name = name ;
		chatContainer.type = 'connect';
		var chatContainerID = chatContainer.insert();

		return chatContainerID;
	},

	_addMembers: function(groupID, profileList){
		var members = [];
		var locState = 'admin';
		var locDomain = 'global';
		/*
		, state, domain
		if(state){
			locState = state;
		}
		if(domain){
			locDomain = domain;
		}*/
		for (var i=0; i<profileList.length; i++){
			var chatMember = new GlideRecord("live_group_member");
			chatMember.group = groupID ;
			chatMember.member = profileList[i];
			chatMember.state = locState;
			chatMember.sys_domain = locDomain;
			chatMember.frame_state = 'closed';
			members.push(chatMember.insert());
		}
		return members;

	},

	_createConversation: function(recipient, secondaryRecipients, sender, messages, groupName, popUp){
		var grMember = [];
		grMember.push(recipient);
		grMember.push(secondaryRecipients);
		grMember.push(sender);
		grMember = this._getProfileList(grMember);
		var to_profile = this._getProfile(recipient);
		var from_profile = this._getProfile(sender);

		var group = this._createGroup(groupName);
		var members = this._addMembers(group, grMember);

		for (var i = 0; i<messages.length;i++){
		var lm = new global.LiveFeedMessage();

		var data = {
			"message": messages[i],
			"group_id": group,
			"to_profile": to_profile,
			"is_worknotes": null,
			"from_profile": from_profile
		};

		lm.postMessage(data);
		}

		if(popUp){
			var gr = new GlideRecord('live_group_member');
			gr.addQuery('group', group);
			gr.query();

			while (gr.next()){
				gr.frame_state = 'open';
				gr.update();		
			}
		}
return group;
	},

	type: 'GlideLiveFeedEnhancer'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-06-05 12:22:04</sys_created_on>
        <sys_id>f331c5054fa21300b1350fbf9310c77e</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>GlideLiveFeedEnhancer</sys_name>
        <sys_package display_value="TechnikV2" source="x_178023_technikv2">545796c64ff11300b1350fbf9310c744</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TechnikV2">545796c64ff11300b1350fbf9310c744</sys_scope>
        <sys_update_name>sys_script_include_f331c5054fa21300b1350fbf9310c77e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-06-06 13:20:13</sys_updated_on>
    </sys_script_include>
</record_update>
